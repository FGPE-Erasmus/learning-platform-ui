RESPONSE z POST PROJECT

  {
    "is_deleted": false,
    "status": "open",
    "created_at": "2020-01-29T09:09:23.021Z",
    "updated_at": "2020-01-29T09:09:23.021Z",
    "id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
    "name": "MD Project",
    "description": "Test project",
    "owner_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
    "is_public": true,
    "permissions": [
      {
        "is_deleted": false,
        "created_at": "2020-01-29T09:09:23.037Z",
        "updated_at": "2020-01-29T09:09:23.037Z",
        "project_id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
        "user_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
        "access_level": 4
      }
    ]
  }
]

RESPONSE Z GET EXERCISE

{
  "is_deleted": false,
  "created_at": "2020-01-29T09:18:10.507Z",
  "updated_at": "2020-01-29T09:18:11.688Z",
  "id": "0b1a4f16-4166-4f0c-8aa8-d62e885c56f9",
  "title": "Olá Mundo!",
  "module": "Iniciação",
  "owner_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
  "project_id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
  "keywords": [
    "olá",
    "mundo"
  ],
  "type": "blank_sheet",
  "event": "event1",
  "platform": "platform9&3/4",
  "difficulty": "beginner",
  "status": "draft"
}

RESPONSE Z POST TESTSETS

{
  "is_deleted": false,
  "name": "Grupo 1",
  "weight": 0.1,
  "visible": true,
  "exercise_id": "0b1a4f16-4166-4f0c-8aa8-d62e885c56f9",
  "updated_at": "2020-01-29T10:12:24.258Z",
  "created_at": "2020-01-29T10:12:24.258Z",
  "id": "46593a31-43cb-4c9c-8323-77a590710be4"
}

 1. Authentication  

 POST 'http://fgpe.dcc.fc.up.pt:80/api/auth/login'

 headers:{  
            "email": "your_email",
            "password": "your_password"

        }

Response (200):

{
  "expiresIn": 3600,
  "refreshTokenExpiresIn": 86400,
  "accessToken": "your_token",
  "refreshToken": "your_responsetoken"
}

2. Get exercise (created by somebody else)

GET 'http://fgpe.dcc.fc.up.pt:80/api/exercises/0b1a4f16-4166-4f0c-8aa8-d62e885c56f9'

headers:{  
            "Authorization": "Bearer " + your_token ,
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin" : "*"

        }

RESPONSE(403):

{
  "statusCode": 403,
  "error": "Forbidden",
  "message": "You do not have sufficient privileges",
  "timestamp": "2020-01-29T11:22:39.536Z"
}

3. Get exercises (all)

GET 'http://fgpe.dcc.fc.up.pt:80/api/exercises?page=1&limit=6&filter=project_id||eq||'

headers:{  
            "Authorization": "Bearer " + your_token ,
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin" : "*"

        }

RESPONSE(404):

404(not found) & cors error:

Access to XMLHttpRequest at 'http://fgpe.dcc.fc.up.pt/api/exercises?page=1&limit=6&filter=project_id||eq||' 
from origin 'http://localhost:8080' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header 
is present on the requested resource.


3. Get projects 

GET 'http://fgpe.dcc.fc.up.pt:80/api/projects'

RESPONSE(200):

{
    "statusCode" : 200,
    "data" : [] // that was empty, like there was no project at all

}

4. Create project

POST 'http://fgpe.dcc.fc.up.pt:80/api/projects'

BODY:
{
    "created_at": "2019-09-23T18:29:52.099Z",
    "updated_at": "2019-09-23T19:47:20.520Z",
    "name": "FGPE Project",
    "description": "Framework for Gamified Programming Education",
    "is_public": true,
    "status": "open",
    "repo_owner": "jcpaiva-fgpe",
    "repo_name": "reponame"
}

RESPONSE(200):

{
    "is_deleted": false,
    "status": "open",
    "created_at": "2020-01-29T09:09:23.021Z",
    "updated_at": "2020-01-29T09:09:23.021Z",
    "id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
    "name": "MD Project",
    "description": "Test project",
    "owner_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
    "is_public": true,
    "permissions": [
      {
        "is_deleted": false,
        "created_at": "2020-01-29T09:09:23.037Z",
        "updated_at": "2020-01-29T09:09:23.037Z",
        "project_id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
        "user_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
        "access_level": 4
      }
    ]
  }
]

5. Create exercise

POST 'http://fgpe.dcc.fc.up.pt:80/api/exercises'

BODY:
{
    "title": "Olá Mundo!",
    "module": "Iniciação",
    "project_id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
    "keywords": ["olá", "mundo"],
    "type": "blank_sheet",
    "event": "",
    "platform": "",
    "difficulty": "beginner"
}

RESPONSE(200):
{
    "statusCode" : 200 //etc info about created exercise
}

6. Get exercise (created by me)

GET 'http://fgpe.dcc.fc.up.pt:80/api/exercises/0b1a4f16-4166-4f0c-8aa8-d62e885c56f9'

headers:{  
            "Authorization": "Bearer " + your_token ,
            "Accept": "application/json",
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin" : "*"

        }

RESPONSE(200):

{
  "is_deleted": false,
  "created_at": "2020-01-29T09:18:10.507Z",
  "updated_at": "2020-01-29T09:18:11.688Z",
  "id": "0b1a4f16-4166-4f0c-8aa8-d62e885c56f9",
  "title": "Olá Mundo!",
  "module": "Iniciação",
  "owner_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
  "project_id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
  "keywords": [
    "olá",
    "mundo"
  ],
  "type": "blank_sheet",
  "event": "event1",
  "platform": "platform9&3/4",
  "difficulty": "beginner",
  "status": "draft"
}

UWAGI:

Nie mogę pobrać ćwiczeń utworzonych przez kogoś innego, mogę za to sam stworzyć projekt i dodać ćwiczenie.
Jednak w dokumentacji api metoda na tworzenie ćwiczeń uwzględnia tylko podstawowe metadane (punkt 5 - BODY),
więc nie wiem jak wrzucić kompletne ćwiczenie wraz z "presentation facet", które zawiera intructions, 
statements, embeddables i skeletons. Potrzebuję przykładowej odpowiedzi z kompletnych ćwiczeń, np. tych
utworzonych przez Portugalczyków lub udzielenie priviliges do dostępu do ich ćwiczeń. Jest też kwestia
błędu 404 na metodzie zwracającej wszystkie ćwiczenia.



**********************************
w mounted: if localstorage.get(item) doesnt exist get ajax exercise
***********************************

ODPOWIEDZI

2. Przesyłając POSTem form-data z jakimś plikiem na 'http://fgpe.dcc.fc.up.pt:80/api/exercises/
   0b1a4f16-4166-4f0c-8aa8-d62e885c56f9/dynamic-correctors' dostaję 404. Samo wrzucanie plików do 
   ćwiczeń nie jest mi teraz specjalnie potrzebne (próbowałem wrzucić plik do swojego ćwiczenia, 
   aby dostać się później do niego za pomocą GET exercise lub GET copy exercise).
  

3. Nie ma problemu z pobraniem ćwiczeń z konkretnego projektu (z ich projektami też jest okej), aczkolwiek
   dostaję tylko metadane ćwiczeń (bez skeletons itd).


   Próbowałem dostać się do instrukcji do ćwiczeń przez "Get Exercise Copy", jednak zawsze dostaję 404.
   
   http://fgpe.dcc.fc.up.pt:80/api/exercises/14ab2abf-b03b-4018-aba4-3befff9e8624/files/read?pathname=
   7111b863-bbaa-4fec-9bbb-ac79638567f6/instruction/istructions.txt
   
   http://fgpe.dcc.fc.up.pt:80/api/exercises/14ab2abf-b03b-4018-aba4-3befff9e8624/files/read?pathname=
   7111b863-bbaa-4fec-9bbb-ac79638567f6/instruction/instructions.txt
    
   http://fgpe.dcc.fc.up.pt:80/api/exercises/14ab2abf-b03b-4018-aba4-3befff9e8624/files/read?pathname=
   7111b863-bbaa-4fec-9bbb-ac79638567f6/instruction/starter-course.txt

   http://fgpe.dcc.fc.up.pt:80/api/exercises/14ab2abf-b03b-4018-aba4-3befff9e8624/files/read?pathname=
   36dd4aa3-959c-4122-99fe-05e6d8cf1537/instruction/starter-course.txt

PYTANIA:

1. Potrzebuję informacji jak korzystać z "Get exercise copy" i czy z tego endpointu manipulując urlem mogę pobierać
inne pliki z folderu z głównego folderu z ćwiczeniem tj. np. katalogi embeddable i statement.

2. Skoro jest taka hierarchia: kurs>moduł>punkt, to czy tworząc url:
   nazwa_kursu/nr_lekcji.nr_punktu.nr_ćwiczenia mogę uznać, że lekcja=moduł?

3. Skąd pobierać kursy/moduły/punkty?

***************************************

1. Czy formaty wrzucanych plików do ćwiczeń będą weryfikowane?
******************************************

http://fgpe.dcc.fc.up.pt:80/api/gamification-layers?filter=project_id||eq||

[
  {
    "is_deleted": false,
    "created_at": "2020-01-22T13:51:53.381Z",
    "updated_at": "2020-01-23T16:20:28.456Z",
    "id": "6783f030-50dc-4e08-a699-c21a9fc72a30",
    "name": "Test123",
    "description": "This is a test",
    "owner_id": "f7fd068f-cfc5-48c3-a044-4964ee3dae2c",
    "project_id": "7111b863-bbaa-4fec-9bbb-ac79638567f6",
    "keywords": [],
    "status": "published"
  }
]

Mój

[
  {
    "is_deleted": false,
    "created_at": "2020-02-03T12:14:49.342Z",
    "updated_at": "2020-02-03T12:14:49.342Z",
    "id": "22e59b4f-bc1e-42bb-b113-cf4d67ae4acd",
    "name": "lekcja 1",
    "description": "Opis lekcji 1",
    "owner_id": "2c08f4fd-0a36-4855-a1b2-1a40b78ac4c3",
    "project_id": "34d2987b-1dd2-4912-96e5-23ff90378c42",
    "keywords": [
      "asd"
    ],
    "status": "published"
  }
]

http://fgpe.dcc.fc.up.pt:80/api/gamification-layers/6783f030-50dc-4e08-a699-c21a9fc72a30
{
  "is_deleted": false,
  "created_at": "2020-01-22T13:51:53.381Z",
  "updated_at": "2020-01-23T16:20:28.456Z",
  "id": "6783f030-50dc-4e08-a699-c21a9fc72a30",
  "name": "Test123",
  "description": "This is a test",
  "owner_id": "f7fd068f-cfc5-48c3-a044-4964ee3dae2c",
  "project_id": "7111b863-bbaa-4fec-9bbb-ac79638567f6",
  "keywords": [],
  "status": "published"
}


http://fgpe.dcc.fc.up.pt:80/api/challenges?filter=gl_id||eq||22e59b4f-bc1e-42bb-b113-cf4d67ae4acd

[
  {
    "is_deleted": false,
    "created_at": "2020-02-03T12:15:29.743Z",
    "updated_at": "2020-02-03T12:15:29.743Z",
    "id": "737708ba-a58a-4bb8-8ed7-2e04f3a99fdc",
    "gl_id": "22e59b4f-bc1e-42bb-b113-cf4d67ae4acd",
    "name": "Punkt 1",
    "description": "Opis punktu 1",
    "mode": "NORMAL",
    "mode_parameters": [],
    "locked": false,
    "hidden": false,
    "difficulty": "BEGINNER",
    "parent_challenge_id": null,
    "sub_challenge_ids": [],
    "exercise_ids": [
      "092b8f1e-84da-4206-98f0-31c710f58618"
    ]
  }
]

nazwa_kursu/nr_lekcji.nr_punktu.nr_ćwiczenia
project_name/gamification_layer_id.challenge_id.exercise_id

1. Get projects list (kursy)
2. Get gamification-layers list (lekcje)
3. Get challenges list (punkty)
4. Get exercises (ćwiczenia)


<!--
        <li class="nav-item">
        

        <router-link to="/" class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#projects" aria-expanded="false" aria-controls="collapsePages">
          <i class="far fa-sticky-note"></i>
          <span class='menu_span'>PROJECTS</span>
        </router-link>
      
        
        <div id="projects" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar" style="">
            <router-link to="/" exact v-on:click.native="getGamifications($event, project.id, projects.indexOf(project))"
             data-toggle="collapse" aria-expanded="false" data-target="#gamifications" class="nav-link collapsed" v-for="project in projects">{{ project.name }}
            </router-link>         
        </div>

        <div id="gamifications"  class="collapse show" style="" data-parent="#projects">
          <div v-if="project_id != null" class="bg-white py-2 collapse-inner rounded">
            <h6 class="collapse-header">Layers in:{{projects[project_id].name}}</h6>
            <router-link :to='"/challenges/"+gamification_layer.id' v-for="gamification_layer in gamification_layers" class="collapse-item">
              {{gamification_layer.name}}
            </router-link>
          </div>
        </div>
        



        <router-link to="/editor/nazwa_kursu/" class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapsePages" aria-expanded="false" aria-controls="collapsePages">
          <i class="far fa-sticky-note"></i>
          <span class='menu_span'>IDE</span>
        </router-link>

        <div id="collapsePages" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar" style="">
          <div class="bg-white py-2 collapse-inner rounded">
            <router-link class="collapse-item" :to="'/editor/nazwa_kursu/'+exes.indexOf(exe)" v-for="exe in exes">{{exe.title}}<span class="dot float-right"></span>
            </router-link>
          </div>
        </div>
      </li>-->

<template>
    <div>
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

          <!-- Sidebar Toggle (Topbar) -->
          <!--
          <h1 class="h3 mb-4 text-gray-800"><i class="far fa-sticky-note"></i> IDE</h1>
          
          <h1 class="h5 mb-1 text-gray-800 text-left">Kurs: Programowanie</h1>
          <h1 class="h5 mb-1 text-gray-800 mx-auto text-right">Moduł: Python</h1>
          -->
            <img src="../packages/img/logo2.svg" style="max-width:45px;width:100%">
                <div style="height:45px">
                    <h1 class="h6 text-gray-800">Kurs: Programowanie</h1>
                    <h1 class="h6 text-gray-800 ">Moduł: Python</h1>
                </div>
            <!-- Topbar Navbar -->
            <ul class="navbar-nav ml-auto">
            <!-- Nav Item - User Information -->
                <li class="nav-item dropdown no-arrow">
                    <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="mr-2 d-none d-lg-inline text-gray-600 small">Twój profil</span>
                        <img class="img-profile rounded-circle" src="https://source.unsplash.com/QAB-WJcbgJk/60x60">
                   </a>
                  <!-- Dropdown - User Information -->
                    <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                        <a class="dropdown-item" href="#">
                          <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                          Profil
                        </a>
                        <a class="dropdown-item" href="#">
                          <i class="fas fa-exchange-alt mr-2 text-gray-400"></i>
                          Zmiana kursu
                        </a>
                        <a class="dropdown-item" href="#">
                          <i class="fas fa-exchange-alt mr-2 text-gray-400"></i>
                          Zmiana modułu
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal">
                          <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                          Wyloguj
                        </a>
                    </div>
                </li>
            </ul>
        </nav>
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">TYTUŁ PUNKTU</h6>
            </div>
            <div class="card-body" style="min-height: 100px;">
                <h6 style="white-space: pre-line;">Treść punktu:</h6>
                <span>Lista ćwiczeń dostępnych dla punktu:</span>
                <!--
                <router-link :to="'/editor/nazwa_kursu/'+exes.indexOf(tas)" v-for="tas in exes">{{tas.title}}</router-link>
                -->
            </div>
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">TASK</h6>
            </div>
            <div class="card-body" style="min-height: 100px;">
                <div class="row">
                    <div class="col-6">
                         {{exercise}}     
                    </div>          
                        <div class="col-6">
                            <div class="card border-left-info shadow py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Tasks
                                                <div class="row no-gutters align-items-center">
                                                    <div class="col-auto">
                                                        <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">50%</div>
                                                    </div>
                                                <div class="col">
                                                    <div class="progress progress-sm mr-2">
                                                        <div class="progress-bar bg-info" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                          <h6 class="m-0 font-weight-bold text-primary">CODE</h6>
                        </div>
                        <div class="card-body"> 
                            <textarea id="editor"></textarea>
                            <div class="mb-4"></div>
                            <button type="button" class="btn btn-primary mr-2" v-on:click="reload()"><i class="fas fa-redo mr-1"></i> Reload</button>
                            <button type="button" class="btn btn-primary mr-2" v-on:click="runit()"><i class="fas fa-running mr-1"></i> Run</button>
                            <button type="button" class="btn btn-primary mr-2" v-on:click="terminate()"><i class="fas fa-stop-circle mr-1"></i> Stop</button>
                            <button type="button" class="btn btn-primary" v-on:click="sendAnswer()"><i class="far fa-save mr-1"></i> Save</button>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                          <h6 class="m-0 font-weight-bold text-primary">OUTPUT</h6>
                        </div>
                        <div class="card-body">
                           <textarea id="output"></textarea>
                        </div>
                    </div>
                </div> 
            </div>
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">OCENA: ZALICZONE</h6>
            </div>
            <div class="card-body" style="min-height: 100px;">
                <h6>Komentarze</h6>
            </div>
        </div>
    </div>
</template>

<script>

import * as edit from '../packages/skulpt/skulpt.min.js'
import * as edits from '../packages/skulpt/skulpt-stdlib.js'
import * as cdmr from '../packages/codemirror/lib/codemirror.js'
import * as pyth from '../packages/codemirror/mode/python/python.js'

import * as bs from '../packages/sb-admin-2/bootstrap.bundle.min.js'
import * as jq from '../packages/sb-admin-2/jquery-3.4.1.min.js'

import axios from "axios";


export default {

name: "Editor",



props:['exercise'],

mounted(){
    this.runmirror();
    this.runoutput();
    this.getExercises();
    this.getExercisesTest();  
},

watch: {
    $route(to, from) {
      this.editor.setValue(JSON.parse(localStorage.getItem('template'))[this.$route.params.id]); 
    }
  },

data(){
    return {
        editor: null,
        output: null,
        exes: JSON.parse(localStorage.getItem('exercises_meta')).data,
        exercises_meta: [],
        task: [],
        template: null,       
    }
},

methods: {
    // RUN INPUT CODE EDITOR
    runmirror: function(){
        this.editor = cdmr.fromTextArea(document.getElementById("editor"), {
            lineNumbers: true,
            mode: 'python',
            theme: 'dracula',
        });

        this.editor.setSize('100%', 600);  
    },
    // RUN OUTPUT CODE EDITOR
    runoutput: function(){
        this.output = cdmr.fromTextArea(document.getElementById("output"), {
            lineNumbers: true,
            mode: 'text/plain',
            theme: 'default',
        });

        this.output.setSize('100%', 600);  
    },
    

    outf: function(text){
        let mypre = document.getElementById("output"); 
        mypre.innerHTML = mypre.innerHTML + text;

    },

    builtinRead: function (x) {
        if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
        throw "File not found: '" + x + "'";
        return Sk.builtinFiles["files"][x];
    },

    reload: function(){
        this.editor.setValue('');
    },


    terminate: function(){
        Sk.execLimit = 0;
        Sk.timeoutMsg = function() {
            return "Stopped";
        }    
    },

    //FLASK API SIDE METHODS
    getUserCourses: function(){
        axios.get('http://127.0.0.1:9000/api/user-courses/').then(response => {
            this.results = response;
            console.log(response.data);
            //this.images = response.data.data[0].image_url;
            this.$data.task = response;
        })
    },

    getUserCourseStatistics: function(){
        this.$http.get('http://127.0.0.1:9000/api/user-course/1/statistics').then(response => {
            this.results = response;
        })
    },

    getListOfExercises: function(){
        this.$http.get('http://127.0.0.1:9000/api/user-courses/1/exercies/').then(response => {
            this.results = response;
        })
    },

    getLastCoursePosition: function(){
        this.$http.get('http://127.0.0.1:9000/api/usercourse/1/position/').then(response => {
            this.results = response; 
        })
    },

    sendAnswer: function(){
        let content = this.editor.getDoc().getValue();

        this.$http.put('http://127.0.0.1:9000/api/send-answer/1',content).then(response => {
            this.results = response;
        })
    },
    // REPO API SIDE METHODS

    getExercisesTest: function(){

        var ex = localStorage.getItem('exercisessss');
        
        if (!ex){
                axios.post("http://fgpe.dcc.fc.up.pt:80/api/auth/login", {
          email: "kacper_chrz@wp.pl",
          password: "testtest"
        })
        .then(function(response) {
          //console.log(response);
          let token = response.data.accessToken;

          let config = {
            headers: {  'Authorization': 'Bearer ' + token ,
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin' : '*'
             },
          };

          let link = 'http://fgpe.dcc.fc.up.pt:80/api/challenges?filter=gl_id||eq||22e59b4f-bc1e-42bb-b113-cf4d67ae4acd';
          axios.get(link, config)
            .then(function(response) {
              console.log(response.data);
            });
        });
            
        };
        
    },

    getExercises: function(){

        let ex = localStorage.getItem('exercises_meta');
        let context = this;
        //AUTH  
        if(!ex){
            axios.post("http://fgpe.dcc.fc.up.pt:80/api/auth/login", {
            email: "kacper_chrz@wp.pl",
            password: "testtest"
            }).then(function(response){
         
          
                let token = response.data.accessToken;
                let config = {
                    headers: {  
                        'Authorization': 'Bearer ' + token ,
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin' : '*'
                    },
                };
                //IN GIVEN PROJECT GET ALL EXERCISES METADATA
                axios.get('http://fgpe.dcc.fc.up.pt:80/api/exercises?page=1&limit=6&filter=project_id||eq||7111b863-bbaa-4fec-9bbb-ac79638567f6', config)
                .then(function(response) {
              
                    let exercises_meta = [];

                    for (let i=0; i<response.data.data.length; i++){
                        exercises_meta.push(response.data.data[i]);
                    }

                    localStorage.setItem('exercises_meta', JSON.stringify(response.data.data));

                    let instructions = [];

                    localStorage.setItem("instructions", JSON.stringify(instructions));
                    localStorage.setItem("template", JSON.stringify(instructions));

                    for (let i=0; i<exercises_meta.length; i++){

                    let link = 'http://fgpe.dcc.fc.up.pt:80/api/exercises/'+ exercises_meta[i].id +'/files/read?pathname='+ exercises_meta[i].id + '/instruction/istructions.txt';
                    //GET EXERCISE INSTRUCTION
                    axios.get(link, config).then(function(response) {
                
                        let decodedString = atob(response.data);
                  
                        let stored = JSON.parse(localStorage.getItem("instructions"));
                        let instr = decodedString;
                        stored.push(instr);
                        localStorage.setItem("instructions", JSON.stringify(stored));

                        let template_link = 'http://fgpe.dcc.fc.up.pt:80/api/exercises/'+ exercises_meta[i].id +'/files/read?pathname='+ exercises_meta[i].id + '/template/template_1.c';
                        //GET EXERCISE TEMPLATE
                        axios.get(template_link, config).then(function(response) {
            
                            let decodedString = atob(response.data);
                            let stored = JSON.parse(localStorage.getItem("template"));
                            let instr = decodedString;
                            stored.push(instr);
                            localStorage.setItem("template", JSON.stringify(stored));
                        });
                    });
                }
            });
        });   
        }   
    },   
    // RUN PYTHON INTERPRETER
    runit: function () {

        const cp_this = this;
        let sourcecode = this.editor.getDoc().getValue();

        Sk.pre = "output";
        Sk.configure({output:this.outf, read:this.builtinRead}); 

        var myPromise = Sk.misceval.asyncToPromise(function(){
            return Sk.importMainWithBody("<stdin>", false, sourcecode, true);
        });

        myPromise.then(function(mod) {
            cp_this.output.getDoc().setValue(document.getElementById('output').innerHTML);
        },
            function(err){
                document.getElementById('output').innerHTML = err.toString();
                cp_this.output.getDoc().setValue(err.toString());
            });
        }
    }
};
</script>

<style>

@import '../packages/sb-admin-2/sb-admin-2.css';
@import '../packages/codemirror/theme/dracula.css';
@import '../packages/codemirror/lib/codemirror.css';

.CodeMirror { text-align: left!important; }

.h3{padding-top:1.0rem !important;}

</style>




***************************

Jakie możliwe formaty statementów?


POST: http://fgpe.dcc.fc.up.pt/api/auth/register

Content-Type: application/json;
Accept: application/json

RESPONSE:422 Unprocessable Entity

{"statusCode":422,"message":[{"property":"password","children":[],"constraints":{"minLength":
"password must be longer than or equal to 8 characters","password":"VALIDATORS.FAILURE_MESSAGES.WEAK_PASSWORD"}}],
"error":"Validation","timestamp":"2020-02-17T09:12:17.165Z"}
*********************************
POST: http://fgpe.dcc.fc.up.pt/api/auth/register

Content-Type: application/json;
Accept: application/json

RESPONSE:404 

John
Doe
random@gmail.com
qwerty123

response logowania bez weryfikacji email:

{statusCode: 412, error: "User", message: "User is not verified", condition: 100001,…}
condition: 100001
error: "User"
message: "User is not verified"
statusCode: 412
timestamp: "2020-02-17T09:19:07.238Z"
****************
{"statusCode":409,"error":"Conflict","message":"User already exists.","timestamp":"2020-02-17T09:26:56.697Z"}
******************
email

mike_tyson41@onet.pl
pass: Djhdvdosadbv34
******************
johny.bravo8468@onet.pl
pass: Srnyy6n64u

CONFIRM MY EMAIL ADRESS - http://fgpe.dcc.fc.up.pt/pages/verify-email?token=eyJhbGciOiJIUzI1NiIsInR5cCI6
IkpXVCJ9.eyJpZCI6IjM1ZDEzMDQwLTMwYWMtNDZkOC04ZTBiLWE3YjU5Yjg1M2ZhZiIsImlhdCI6MTU4MTkzMTk0NywiZXhwIjoxNTgyM
DE4MzQ3LCJhdWQiOiJmZ3BlLmRjYy5mYy51cC5wdCIsImlzcyI6IjZiODdkNDMxLWI3M2EtNDNmZi05ZjdjLTA2NzVkNDM2ODUzMSJ9.reV
XHsZF8bsAgCTzhn8N4mnvNgcTTTNrjMsnAcnNic4
**************
GET http://fgpe.dcc.fc.up.pt:80/api/auth/register/verify?token=tokenzmaila

expiresIn token itd
***********
logowanie i rejestracja działa, ale po wypelnieniu formularza rejestracji user dostaje maila "confirm my email adress"
gdzie przekierowuje na strone authorkita portugalczyków czyli "http://fgpe.dcc.fc.up.pt." i po potwierdzeniu przez
usera loguje go authorkita. Jednakże metoda "create user" w api ma pola: id,first_name, last_name i email (nie ma hasła).
Gdybyśmy oauthem pobierali np. z facebooka imie, nazwisko i maila można na podstawie tych danych stworzyc usera. 
Jak user będzie się później z facebookiem to system uwierzytelni go na podstawie imienia, nazwiska i maila i 
udostepni mu zasób. Myślę, ze tak to sobie wymyślili Portugalczycy. jak myślisz? 
**************
TODO:
vue-i18n wersja ang i pl
jesli nie ma nic to nie wyswietlaj module

*****************
http://localhost:8080/projects/d03d18c0-77db-47a7-abb2-9518b4e0e691/lessons/fe6534b8-ef23-44ae-86b8-6b5343832117/challenge/35f20041-0759-4866-8475-3188583807bf/exercise/e723416c-042d-499b-b91f-2268c6cd1b11

***************
RUN - uruchamiamy kod, jak jest input to czyta od usera w przeglądarce, jak skonczy działać to nic 
się nie dzieje 
SUBMIT - uruchamiamy kod tyle razy ile jest zestawów testów, jak jest input to bierze dane z zestawu
testowego, jak skonczy działać to wynik przekazywany jest do walidatora (TBD) i jesli sie zgadza,
cwiczenie zaliczone (co jest też zapisywane na serwerze)

*****************
TODO:


2. Static Correctors. Po Submit wysyłamy tam kod źródłowy do weryfikacji
w naszym przypadku: będzie to funkcja JS która oceni czy jest w nim co trzeba

3. Dynamic Correctors. Po wykonaniu kodu wysyłamy tam wynik (output) działania do weryfikacji
w naszym przypadku: będzie to funkcja JS która oceni czy jest w nim co trzeba





********************
CO ZOSTAŁO OSTATNIO ZROBIONE

1. Pobieranie załączników. Lista załączników jest podana nad sekcją statements, po kliknięciu w załącznik pojawia się modal z jego zawartością.
Obsługiwane formaty: pdf, jpg, png, markdown

2. Pobieranie i dołączanie kodu z template i libraries przed kod użytkownika (kodu z template/libraries nie widać).

3. Pobieranie solutions. Po kliknięciu buttona "Solution" (pod edytorem) pokazuje się modal z zawartością solutions.

4. Zaimplementowanie ćwiczenia "SPOT BUGS". Po kliknięciu w numer lini edytora pojawia się marker (biała kropka) przy numerze. Można zaznaczać 
i odznaczać różne wiersze. Po submit przekazuję tablicę zaznaczonych numerów wierszy np. [3,2,7].

5. Zaimplementowanie testów. Jeśli jest input w programie i są testy jako tablica np. [3,3,20,null,undefined,'asd'], to odpalam program dla każdego
elementu tej tablicy. Po każdej iteracji wynik działania programu trafia do tablicy test_results.

6. Poprawione uwagi do layoutu
************************************************************

CO ZOSTAŁO DO ZROBIENIA 

1. Static Correctors - test na source code
jak to ma dzialac - ja mam chyba inna koncepcje niz porto
oni tam chyba chcieli jakies skrypty batchowe dawac
ja w swoich bede dawal tam instrukcje dla walidatora
o ile pamietam jest to plik - proponuje zeby moze po rozszerzeniu poznawac co z tym zrobic?
powiedzmy *.ECL to instrukcje dla walidatora, wszystko inne - skrypt dla powłoki, nieobsługiwane przez naszą platformę


2. Poprawa działania input().

Poprawić trzeba działanie dla przypadku, gdy chcemy wyswietlic print(input). Jeśli chodzi o odpalanie testów z print(input)
to działa dobrze.

3. Testy poprawa. wg Porto:
in.txt - to zestaw wejsc dla 1 uruchomienia
out.txt - poprawne wyjscie dla danego uruchomienia
(jeśli się zgadza to jest poprawne rozwiązanie)

przykład: program na sume dwoch liczb: in=[1,3] out = [4]

wg mnie:
meczarnia bedzie z tyloma plikami
moze dla swoich zadań bede robił jeden plik inout.txt, w którym każdy wiersz dotyczyłby 1 uruchomienia i miałby postać:
[in] -> [out]
np.:
[1,3] -> [4]

ok?

4. Walidator
człowiek który miał go zrobić ciągle nie ma czasu
spróbujcie może zaimplementować na razie na potrzeby testów taki prosty, który weźmie jeden plik vrules.txt, w którym każda linia ma postać albo
rx -> fb
albo
rx +> fb
gdzie:
rx: wyrażenie regularne do użycia na kodzie źródłowym użytkownika
'->' oznacza że wyrażenie jest wymagane, by kod był uznany jako OK
'+>' oznacza że wyrażenie jest zabronione, by kod był uznany jako OK
fb: komunikat zwrotny dla użytkownika
np.:
\bif\b +> W zadaniu nie wolno używać IF !



*************
solutions
*************
def divisible_by_7_not_multiple_of_5(begin, end):
    res = []
    for i in range(begin, end):
        if (i % 7 == 0) and (i % 5 != 0):
            res.append(str(i))
    return res
*************
template
*************

begin = int(input())
end = int(input())

{{code}}

result = divisible_by_7_not_multiple_of_5(begin, end)

print('\n'.join(result))

*************

a = int(input("enter first number: "))
b = int(input("enter second number: "))
c = int(input("enter third number: "))
d = int(input("enter 4 number: "))
 
sum = a + b + c + d
 
print("sum:", sum)

Co zostało z ważnych rzeczy:

1. Poprawa inputa i wyniku działania dla każdego przypadku po wciśnięciu przycisku 'RUN'. Zdarza się, że wynik jest wyświetlany 2 razy, albo nie jest wyświetlany w ogóle (trzeba pokombinować z '\n').
2. Integracja z naszym backendem (funkcje na froncie Kamil już przygotował, trzeba przekazać do nich np. czy ćwiczenie jest zaliczone)
3. Poprawa walidatora (szybkie zadanie - dostosowanie do zmian wprowadzonych przez Profesora, właśnie je robię)
4. Refresh tokena po godzinie.
5. V-if na 'Exercise list within a challenge:', jeśli nie ma 'challenge' w roucie
6. Wyświetlanie listy ćwiczeń w challengu (IDE.vue)
7. V-if na 'Embeddables list', jeśli nie ma załączników w ćwiczeniu

  




wzorzec = 'klucz'
haslo = raw_input()
if haslo == wzorzec:
  print 'Logowanie udane'
***************************
txt = raw_input('Wpisz tekst:')
print txt,'zawiera',len(txt),'liter/-y.'
******************************
wiek = raw_input('Ile masz lat?\n')
while int(wiek) < 18:
    print u'Jeszcze niepełnoletni.'
    wiek = raw_input('A teraz, ile masz lat?\n')
print u'Wreszcie pełnoletni!'

